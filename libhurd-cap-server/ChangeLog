2004-10-19  Marcus Brinkmann  <marcus@gnu.org>

	* client-inhibit.c (_hurd_cap_client_resume): Lock CLIENT->lock,
	not BUCKET->lock.
	* obj-inhibit.c (hurd_cap_obj_resume): Lock OBJ->lock, not
	CAP_CLASS->lock.

2004-10-07  Marcus Brinkmann  <marcus@gnu.org>

	* bucket-manage-mt.c (reply_err): Don't set propagation flag.
	(manage_mt_worker): Clear the propagation flag.

2004-08-02  Peter Bruin  <pjbruin@dds.nl>

	* cap-server-intern.h (_hurd_cap_bucket_cond_check): Call
	_hurd_cap_bucket_cond_busy instead taking its address.

2004-04-12  Marcus Brinkmann  <marcus@gnu.org>

	* bucket-manage-mt.c (manage_mt_worker): Set CTX.obj to NULL
	before calling demuxer.  If later on CTX.obj is not NULL, call
	manage_demuxer_cleanup after sending the reply message.  Set
	propagation flag in message tag.
	(manage_demuxer): Do not release OBJ lock before calling the
	demuxer, do not acquire and release OBJ lock afterwards.  Instead,
	acquire a reference to OBJ.
	(reply_err): Set propagation flag in message tag.

2004-04-11  Marco Gerards  <metgerards@student.han.nl>

	* table.c (hurd_table_init): Return an error code.

2004-04-10  Marcus Brinkmann  <marcus@gnu.org>

	* bucket-manage-mt.c (manage_mt_worker): Use
	_hurd_cap_list_item_dequeued to set current_worker_is_us.

2004-04-09  Marcus Brinkmann  <marcus@gnu.org>

	* cap-server.h (hurd_cap_bucket_inject): Change hurd_cap_t to
	hurd_cap_handle_t in R_CAP argument type.
	* bucket-manage-mt.c (manage_demuxer): Likewise.
	* bucket-inject.c (hurd_cap_bucket_inject): Likewise.  Use
	hurd_cap_handle_make instead hurd_cap_make.

	* obj-copy-out.c (_hurd_cap_obj_copy_out): Set *R_ID after adding
	element.
	* bucket-inject.c (hurd_cap_bucket_inject): Set *R_CAP and return 0.

2004-04-08  Marcus Brinkmann  <marcus@gnu.org>

	* bucket-inject.c, obj-copy-out.c: New files.
	* Makefile.am (libhurd_cap_server_a_SOURCES): Add bucket-inject.c
	and obj-copy-out.c
	* bucket-create.c (hurd_cap_bucket_create): Initialize members
	is_managed, nr_caps, waiting_rpcs of BUCKET.  Set R_BUCKET.
	* cap-server-intern.h (_hurd_cap_client_dealloc): Add new argument
	BUCKET to prototype.
	(struct hurd_cap_client): Remove declaration.
	(struct _hurd_cap_list_item): Add new member tid.  Change type for
	member client to _hurd_cap_client_t.
	(_hurd_cap_list_item_add, _hurd_cap_list_item_remove,
	_hurd_cap_list_item_dequeued): New inline functions.
	(struct _hurd_cap_obj_entry): Rename member IDX to ID.
	(_hurd_cap_obj_copy_out): New prototype.
	(_hurd_cap_client_create): Remove argument R_IDX from prototype.
	(struct _hurd_cap_bucket): Add new members MANAGER, IS_MANAGED,
	IS_MANAGER_WAITING, NR_CAPS, WAITING_RPCS, and FREE_WORKER.
	(_hurd_cap_client_t): Type definition moved to ...
	* cap-server.h (_hurd_cap_client_t): Here.
	(struct _hurd_cap_client_t): New declaration.
	(struct hurd_cap_rpc_context): Define it.
	(hurd_cap_class_demux_t): Renamed to ...
	(hurd_cap_class_demuxer_t): ... this.
	(hurd_cap_class_create, hurd_cap_class_init): Use new type for demuxer
	argument in prototype.
	(hurd_cap_bucket_inject): New prototype.
	* cap-server.h: Include <hurd/types.h>
	* class-create (hurd_cap_class_create): Use new type for demuxer
	argument.  Set R_CLASS.
	* class-init (hurd_cap_class_init): Use new type for demuxer argument.
	* client-release.c (_hurd_cap_client_dealloc): Take new argument
	BUCKET.  New local variable NR_CAPS.  Keep track of number of
	capabilities removed.  Update BUCKET->nr_caps before return.
	(_hurd_cap_client_release): Pass new argument BUCKET to
	_hurd_cap_client_release.
	* client-create.c (_hurd_cap_client_create): Remove argument
	R_IDX.  Consequently, do not set R_IDX anymore.  Set R_CLIENT.
	Pass new argument BUCKET to _hurd_cap_client_dealloc.
	* bucket-inhibit.c (hurd_cap_bucket_end): Check BUCKET->nr_caps if
	FORCE flag is not set.  Cancel the manager thread if needed.
	(_hurd_cap_bucket_cond_busy): Move to ...
	* cap-server-intern.h (_hurd_cap_bucket_cond_busy): ... here.
	Add attribute always-inline.
	(_hurd_cap_bucket_cond_check): New inline function.
	* client-inhibit.c (_hurd_cap_client_cond_busy): Move to ...
	* cap-server-intern.h (_hurd_cap_client_cond_busy): ... here.
	Add attribute always-inline.
	(_hurd_cap_client_cond_check): New inline function.
	* class-inhibit.c (_hurd_cap_class_cond_busy): Move to ...
	* cap-server-intern.h (_hurd_cap_class_cond_busy): ... here.
	Add attribute always-inline.
	(_hurd_cap_class_cond_check): New inline function.
	* obj-inhibit.c (_hurd_cap_obj_cond_busy): Move to ...
	* cap-server-intern.h (_hurd_cap_obj_cond_busy): ... here.
	Add attribute always-inline.
	(_hurd_cap_obj_cond_check): New inline function.

2004-04-01  Marcus Brinkmann  <marcus@gnu.org>

	* Makefile.am (libhurd_cap_server_a_SOURCES): Remove bucket-add.c,
	bucket-remove.c.
	* bucket-add.c, bucket-remove.c: Files removed.
	* cap-server.h (hurd_cap_bucket_add, hurd_cap_bucket_remove):
	Remove prototypes.
	* cap-server-intern.h (struct _hurd_cap_class_entry): Removed.
	(_hurd_cap_class_entry_t): Removed.
	(struct _hurd_cap_bucket): Remove member classes.
	* bucket-create.c (hurd_cap_bucket_create): Do not initialize
	deleted member classes.
	* bucket-free.c (hurd_cap_bucket_free): Do not destroy deleted
	member classes.

2004-03-26  Marcus Brinkmann  <marcus@gnu.org>

	* bucket-add.c, bucket-create.c, bucket-free.c, bucket-inhibit.c,
	bucket-manage-mt.c, bucket-remove.c, cap-server-intern.h,
	class-free.c, class-init.c, obj-dealloc.c, obj-drop.c,
	obj-entry-space.c: New files.
	* Makefile.am (includehurd_HEADERS): Move table.h and task-death.h
	to ...
	(libhurd_cap_server_a_SOURCES): ... here.  Add
	cap-server-intern.h, class-init.c, class-free.c, obj-dealloc.c,
	obj-drop.c, obj-entry-space.c, bucket-create.c, bucket-free.c,
	bucket-add.c, bucket-remove.c, bucket-inhibit.c,
	bucket-manage-mt.c.  Remove class-dealloc.c.
	* headers.m4: Remove table.h and task-death.h.
	* cap-server.h: Include <stdbool.h>, do not include <assert.h>,
	<limits.h>, <hurd/types.h>, <hurd/slab.h>, <hurd/table.h>,
	<hurd/ihash.h> and <hurd/task-death.h>.
	(hurd_cond_wait, struct _hurd_cap_list_item,
	_hurd_cap_list_item_t, _hurd_cap_list_item_add,
	_hurd_cap_list_item_remove, struct _hurd_cap_entry,
	_hurd_cap_entry_t, struct hurd_cap_client, hurd_cap_client_t,
	struct _hurd_cap_client_entry, _hurd_cap_client_entry_t,
	_hurd_cap_class_dealloc, _hurd_cap_client_create,
	hurd_cap_client_lookup, _hurd_cap_client_dealloc,
	hurd_cap_client_inhibit, hurd_cap_client_resume,
	_hurd_cap_client_end): Removed.
	(hurd_cap_rpc_context): New declaration.
	(hurd_cap_class_demux_t): New dummy type (for now).
	(struct hurd_cap_class): Remove members OBJ_SIZE, CLIENT_SLAB,
	CLIENT_COND, CLIENT_COND_LOCK, CLIENTS, CLIENTS_REVERSE,
	CLIENT_THREADS and CLIENT_DEATH_NOTIFY.  Change type of OBJ_SLAB
	to struct hurd_slab_space and rename it to OBJ_SPACE.  Add member
	DEMUXER.  Change type of member STATE to _hurd_cap_state_t.
	(struct hurd_cap_obj): Add member CAP_CLASS.  Change type of
	member STATE to _hurd_cap_state_t.
	(hurd_cap_class_create): Add arguments alignment and demuxer to
	prototype.
	(hurd_cap_class_init): Likewise.
	(hurd_cap_class_free): New prototype.
	(_hurd_cap_class_destroy): Rename to ...
	(hurd_cap_class_destroy): ... this.
	(hurd_cap_obj_lock, hurd_cap_obj_unlock, hurd_cap_obj_ref,
	hurd_cap_obj_rele, hurd_cap_obj_drop): Remove CAP_CLASS argument.
	(hurd_cap_obj_drop): Only declare prototype here.
	(struct _hurd_cap_bucket): New forward declaration.
	(hurd_cap_bucket_t): New typedef.
	(hurd_cap_bucket_create, hurd_cap_bucket_free,
	hurd_cap_bucket_add, hurd_cap_bucket_remove,
	hurd_cap_bucket_manage_mt, hurd_cap_bucket_inhibit,
	hurd_cap_bucket_resume, hurd_cap_bucket_end): New prototypes.
	* class-alloc.c, class-create.c, class-destroy.c, class-inhibit.c,
	client-create.c, client-inhibit.c, client-release.c,
	obj-inhibit.c: Change the callers to take into account the above
	changes.

2004-03-25  Marcus Brinkmann  <marcus@gnu.org>

	* Makefile.am (libhurd_cap_server_a_SOURCES): Add class-inhibit.c,
	client-create.c, client-release.c, client-inhibit.c, and
	obj-inhibit.c.
	* README, class-inhibit.c, client-create.c, client-release.c,
	client-inhibit.c, obj-inhibit.c: New files.
	* cap-server.h: Protect inclusion with _HURD_CAP_SERVER_H.
	Include <hurd/types.h>, <hurd/table.h>, <hurd/ihash.h> and
	<hurd/task-death.h>.
	(hurd_cond_wait): Define to pthread_cond_wait for now.
	(struct _hurd_cap_list_item): New struct.
	(_hurd_cap_list_item_t): New typedef.
	(_hurd_cap_list_item_add, _hurd_cap_list_item_remove): New inline
	functions.
	(enum _hurd_cap_state): New enum.
	(struct _hurd_cap_obj): Add members STATE, PENDING_RPCS,
	COND_WAITER, and CLIENTS.
	(hurd_cap_obj_data): Removed.
	(struct _hurd_cap_entry): New struct.
	(_hurd_cap_entry_t): New type.
	(struct hurd_cap_client): New struct.
	(hurd_cap_client_t): New type.
	(struct _hurd_cap_client_entry): New struct.
	(_hurd_cap_client_entry_t): New type.
	(struct hurd_cap_class): Rename member SLAB to OBJ_SLAB.  Add new
	members OBJ_COND, OBJ_COND_LOCK, CLIENT_SLAB, CLIENT_COND,
	CLIENT_COND_LOCK, CLIENT_DEATH_NOTIFY, LOCK, CLIENTS,
	CLIENTS_REVERSE, STATE, COND, COND_WAITER and PENDING_RPCS.
	(hurd_cap_class_init, _hurd_cap_class_destroy): New prototypes.
	(hurd_cap_class_dealloc): Rename prototype to ...
	(_hurd_cap_class_dealloc): ... this.
	(hurd_cap_obj_lock, hurd_cap_obj_unlock): Change return type to
	void.
	(hurd_cap_obj_drop): Call _hurd_cap_class_dealloc (not
	hurd_cap_class_dealloc).
	(_hurd_cap_client_create, _hurd_cap_client_dealloc,
	_hurd_cap_client_release): New prototype.
	(hurd_cap_client_lookup): New inline function.
	(hurd_cap_class_inhibit, hurd_cap_class_resume,
	hurd_cap_client_inhibit, hurd_cap_client_resume,
	_hurd_cap_client_end, hurd_cap_obj_inhibit, hurd_cap_obj_resume):
	New prototypes.
	* class-alloc.c (hurd_cap_class_alloc): Use CAP_CLASS->obj_slab,
	not CAP_CLASS->slab.  Don't check return value of
	hurd_cap_obj_lock (as it is void now).
	* class-create.c (_hurd_cap_obj_constructor): Initialize
	OBJ->clients, OBJ->state, OBJ->pending_rpcs and OBJ->clients.
	Don't check return value of pthread_mutex_destroy.
	(_hurd_cap_obj_destructor): Destroy OBJ->clients.  Don't check
	return value of pthread_mutex_destroy.
	(_hurd_cap_client_constructor, _hurd_cap_client_destructor,
	_hurd_cap_client_death, hurd_cap_class_init): New functions.
	(hurd_cap_class_create): Rewritten in terms of
	hurd_cap_class_init.
	* class-dealloc.c (hurd_cap_class_dealloc): Rename to ...
	(_hurd_cap_class_dealloc): ... this.  Do not check return value of
	now void hurd_cap_obj_unlock function.  Assert OBJ->state and
	OBJ->pending_rpcs.  Use CAP_CLASS->obj_slab, not CAP_CLASS->slab.
	* class-destroy.c: Do not include <assert.h>.
	(_hurd_cap_client_try_destroy): New function.
	(hurd_cap_class_destroy): Rewritten.
	(hurd_cap_class_free): New function.

	* task-death.h (task_death_notify_t): Fix return type (should be
	void, not void *).

2004-03-23  Marcus Brinkmann  <marcus@gnu.org>

	* Makefile.am (includehurd_HEADERS): Add table.h and task-death.h.
	(libhurd_cap_server_a_SOURCES): Add task-death.c, remove table.h.
	* task-death.h, task-death.c: New files.
	* headers.m4: Add task-death.h.

	* table.h (_HURD_TABLE_ALIGN): New macro.
	(HURD_TABLE_INITIALIZER): Use it for ENTRY_SIZE.

	* Makefile.am (AM_CFLAGS): New variable.
	* headers.m4: Add table.h.
	* table.h (hurd_table_entry_t): Type removed.
	(struct hurd_table): Change type of DATA to char *.  New member
	ENTRY_SIZE.
	(HURD_TABLE_INITIALIZER): Take argument SIZE_OF_ONE.  Initialize
	ENTRY_SIZE.
	(hurd_table_init): Add new argument ENTRY_SIZE to prototype.
	(hurd_table_enter): Change type of DATA to void *.
	(hurd_table_lookup): Change return type to void *.  Return 0, not
	HURD_TABLE_EMPTY.  Reimplement for new semantics.
	* table.c: Include <assert.h>.
	(hurd_table_init): Add new argument ENTRY_SIZE.  Pass it to
	HURD_TABLE_INITIALIZER.
	(hurd_table_enter): Use TABLE->entry_size for reallocation.
	Adjust code to fit new semantics.  Add 1 to TABLE->first_free to
	make that point to the element after the one we just added.

	* Makefile.am (libhurd_cap_server_a_SOURCES): Add table.h, table.c.
	* table.h, table.c: New files.

2004-03-21  Marcus Brinkmann  <marcus@gnu.org>

	* cap-server.h (hurd_cap_obj_rele): Require at least two
	references.  	

	* Initial release.
