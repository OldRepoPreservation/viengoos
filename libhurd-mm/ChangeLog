2007-12-14  Neal H. Walfield  <neal@gnu.org>

	* storage.c (storage_init): If a storage descriptor is full,
	unlink it.

2007-12-14  Neal H. Walfield  <neal@gnu.org>

	* storage.c (shadow_setup): If we allocate the last frame, unlink
	the folio.

2007-12-14  Neal H. Walfield  <neal@gnu.org>

	* storage.c (shadow_setup): Support the case where the folio is
	full.
	(storage_alloc_): If AS_INIT_DONE is false, use as_alloc_slow to
	allocate an address.  Only call shadow_setup if CAP is not NULL.
	* as.h (as_alloc_slow): Remove parameter data_mappable and
	parameter may_alloc.  Return a struct hurd_object_desc *, not an
	addr_t.
	* as.c (as_alloc): Assert that AS_INIT_DONE is true.  Improve
	debugging output.
	(as_slot_ensure): Assert that AS_INIT_DONE is true.
	(as_alloc_slow): Remove parameter data_mappable and parameter
	may_alloc.  Return a struct hurd_object_desc *, not an addr_t.
	Don't special case page-sized objects, always find a void
	capability.  Don't return an address twice.  Don't use
	capability slots in folios.
	(as_init:add): Take additional argument, addr.  Use this rather
	than DESC->OBJECT.  Generalize code for iterating over folios and
	cappages.  Correctly walk folios.
	(as_init): Call add on both a descriptor object and its storage.
	(as_walk): Rewrite such that if AS_INIT_DONE is not true, we
	don't use a recursive function.  If the callback function returns -1,
	then don't descend.
	(as_walk:do_walk): Also walk folios.

2007-12-14  Neal H. Walfield  <neal@gnu.org>

	* as.c (allocate_object): Correctly save and return the shadow
	object.

2007-12-13  Neal H. Walfield  <neal@gnu.org>

	* storage.c (storage_alloc_): Update to folio_object_alloc's
	interface change.
	(storage_free_): Likewise.

2007-12-13  Neal H. Walfield  <neal@gnu.org>

	* storage.h (storage_alloc): Rename from this...
	(storage_alloc_): ... to this.
	(storage_free): Rename from this...
	(storage_free_): ... to this.
	(storage_alloc): New macro.
	(storage_free): New macro.
	* storage.c (storage_alloc): Rename from this...
	(storage_alloc_): ... to this.
	(storage_free): Rename from this...
	(storage_free_): ... to this.

2007-12-13  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c (exception_page_cleanup): Remove debugging cruft.
	
2007-12-13  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c (exception_frame_alloc): When allocating the first
	frame, set EXCEPTION_PAGE->EXCEPTION_STACK_BOTTOM.
	(exception_page_cleanup): New function.

	* ia32-exception-entry.S (_exception_handler_end): Correctly
	adjust the exception page's exception stack.

2007-12-12  Neal H. Walfield  <neal@gnu.org>

	* mmap.c (munmap): Free the virtual addresses.

2007-12-12  Neal H. Walfield  <neal@gnu.org>

	* storage.c (ss_lock_trace) [! NDEBUG]: New definition.
	(ss_lock_trace_count) [! NDEBUG]: Likewise.

2007-12-12  Neal H. Walfield  <neal@gnu.org>

	* mmap.c (munmap): Implement.
	* pager.h (pager_destroy_t): New type.
	(struct pager): New field, destory.
	(pagers): New declaration.
	* pager.c (pagers): Remove static qualifier.
	* anonymous.c (destroy): New function.
	(anonymous_pager_alloc): Set ANON->PAGER.DESTROY to it.
	(anonymous_pager_destroy): Call destroy to do the bulk of the
	work.

2007-12-10  Neal H. Walfield  <neal@gnu.org>

	* as.c: Don't include <pthread.h>.  Include <hurd/mutex.h>.
	(free_spaces_lock): Make an ss_mutex_t, not a pthread_mutex_t.
	Update users.
	* storage.c: Don't include <pthread.h>.  Include <hurd/mutex.h>.
	(struct storage_desc): Make lock an ss_mutex_t, not a
	pthread_mutex_t.  Update users.
	(storage_descs_lock): Likewise.
	* pager.h: Don't include <pthread.h>.  Include <hurd/mutex.h>.
	(struct pager): Make lock an ss_mutex_t, not a pthread_mutex_t.
	Update users.
	(pagers_lock): Likewise.

2007-12-06  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c (exception_frame_alloc): Correctly set the
	EXCEPTION_PAGE->EXCEPTION_STACK to the allocated frame.
	(utcb_state_save): New function.
	(utcb_state_restore): Likewise.
	(exception_handler_normal): Call utcb_state_restore before
	returning.
	(exception_handler_activated): Save the UTCB state.  If returning
	without requiring a call to exception_handler_normal, then restore
	the UTCB state.

2007-12-05  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c: Include <hurd/slab.h> and "as.h".
	(exception_frame_slab): New local variable.
	(exception_frame_slab_alloc): New function.
	(exception_frame_slab_dealloc): Likewise.
	(exception_frame_alloc): Likewise.
	(exception_handler): Rename from this...
	(exception_handler_activated): ... to this.  Update callers.  Only
	handle the fault if the fault corresponds to the page the stack
	pointer references at the time of the fault or the next stack
	page.
	(exception_handler_normal): New function.
	(exception_handler_init): Initialize exception_frame_slab.
	* ia32-exception-entry.S (EXCEPTION_STACK): New macro.
	(SAVED_EDX): Likewise.
	(EF_SAVED_EAX): Likewise.
	(EF_SAVED_ECX): Likewise.
	(EF_SAVED_EDX): Likewise.
	(EF_SAVED_FLAGS): Likewise.
	(EF_SAVED_IP): Likewise.
	(EF_STACK_START): Likewise.
	(EF_NEXT): Likewise.
	(exception_handler_entry): After calling
	exception_handler_activated, check if the return result is
	non-zero.  If so, call exception_handler_normal.

2007-12-04  Neal H. Walfield  <neal@gnu.org>

	Remove exception threads.  Replace with support for activations.
	* Makefile.am (ARCH_SOURCES): New variable.
	[ARCH_IA32]: Add ia32-exception-entry.S.
	(libhurd_mm_a_SOURCES): Add $(ARCH_SOURCES).
	* ia32-exception-entry.S: New file.
	* exceptions.c: Include <hurd/storage.h> and <hurd/thread.h>.
	(ARG): Don't define.
	(ARG64): Likewise.
	(ARG_ADDR): Likewise.
	(CHECK): Likewise.
	(exception_handler_loop): Remove function.
	(exception_fetch_exception): New function.
	(exception_handler): New function.
	(STACK_SIZE): Don't define.
	(stack): Don't declare.
	(exception_handler_init): Set up the thread's exception page.

2007-11-29  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c (exception_handler_loop): Use
	rm_exception_collect_send_marshal, not
	rm_exception_collect_marshal.

2007-11-27  Neal H. Walfield  <neal@gnu.org>

	* as.c: Include <pthread.h>.  Remove dead code.
	(free_spaces_lock): New variable.
	(free_space_split): Assert that it is held.
	(as_alloc): Make thread-safe.
	(as_alloc_at): Likewise.
	(as_free): Likewise.
	(as_alloced_dump): Likewise.
	* storage.c: Include <pthread.h> and <atomic.h>.
	(free_count): Make a uatomic32_t, rather than an int.  Update
	users to access it using atomic operations.
	(struct storage_desc): New field, lock.
	(storage_descs_lock): New global variable.
	(link): Assert that STORAGE_DESCS_LOCK is held.
	(unlink): Likewise.  Don't assert that E->NEXT is NULL, which is
	valid.
	(slab_space_reserve): Make an atomicptr_t, rather than a void *.
	Update users to access it using atomic operations.
	(check_slab_space_reserve): Rewrite function to be thread-safe.
	(storage_desc_free): Assert that STORAGE_DESCS_LOCK is held.
	(storage_alloc): Rewrite function to be thread-safe.
	(storage_free): Likewise.
	(storage_init): Take STORAGE_DESCS_LOCK.  Initialize SDESC->LOCK.
	* capalloc.c: Include <pthread.h>.
	(struct cappage_desc): New field, lock.
	(unlink): Don't assert E->NEXT.
	(cappage_descs_lock): New variable.
	(capalloc): Make thread safe.
	(capfree): Likewise.
	* pager.h: Include <pthread.h>.
	(pager_fault_t): Note that PAGER->LOCK will be held.
	(struct pager): New field, lock.
	(pagers_lock): New declaration.
	(pager_install): Note locking requirements.
	(pager_relocate): Likewise.
	(pager_deinstall): Likewise.
	* pager.c (pagers_lock): New definition.
	(pager_install): Add asserts.
	(pager_relocate): Likewise.
	(pager_deinstall): Likewise.
	(pager_fault): Likewise.  Make function thread-safe.
	* anonymous.c (struct storage_desc): Add comment about locking.
	(fault): Add assert.
	(anonymous_pager_alloc): Take PAGERS_LOCK before calling
	pager_install and drop it afterwards.
	(anonymous_pager_destroy): Take PAGERS_LOCK before calling
	pager_deinstall and drop it afterwards.  Take ANON->PAGER.LOCK.

2007-11-27  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c (exception_handler_init): Use
	_L4_exchange_registers rather than l4_start_sp_ip to be able to
	detect errors.

2007-11-23  Neal H. Walfield  <neal@gnu.org>

	* mm-init.c: Don't include "exceptions.h".  Include
	<hurd/exceptions.h>.

2007-11-23  Neal H. Walfield  <neal@gnu.org>

	* exceptions.c (exception_thread): Rename from this...
	(exception_handler_loop): ... to this.  Update caller.

	* Makefile.am (libhurd_mm_a_SOURCES): Remove exceptions.h.
	* exceptions.h: Remove file.

2007-11-22  Neal H. Walfield  <neal@gnu.org>

	* as.c (as_alloc_slow): Use CAP_COPY_COPY_ADDR_TRANS_GUARD, not
	CAP_COPY_COPY_GUARD.

2007-11-22  Neal H. Walfield  <neal@gnu.org>

	* storage.h (struct storage): New struct.
	(storage_alloc): Return a struct storage, not an addr.  Update all
	callers.
	* storage.c (struct storage_desc): Remove field shadow.  Add field
	cap.
	(shadow_setup): Save the cap.
	(storage_alloc): Return a struct storage, not an addr.
	(storage_free): Correctly free the shadow if not used.  Update
	STORAGE->CAP to reflect that the folio has been removed.
	* capalloc.c (struct cappage_desc): Add field cap.
	(capalloc): Stash CAP.  When allocating a cappage, allocate a
	shadow object.
	(capfree): Really free CAPPAGE if there is another page available.
	If freeing CAPPAGE, unlink DESC and update DESC->CAP to reflect
	that the page has been deallocated, deallocate the shadow, and
	deallocate CAPPAGE.

	* exceptions.c (exception_thread): Print IP when a fault cannot be
	resolved.

	* mmap.c (mmap): Cast addr to a uintptr_t to elide warning.

2007-11-20  Neal H. Walfield  <neal@gnu.org>

	* pager.h (pager_region_compare): Set A_END and B_END to the last
	byte in their respective region, not the first byte after the end.

2007-11-19  Neal H. Walfield  <neal@gnu.org>

	* Makefile.am (libhurd_mm_a_SOURCES): Add exceptions.h,
	exceptions.c, pager.h, pager.c, anonymous.h and anonymous.c.
	* headers.m4: Link $(BUILDDIR)/include/hurd/pager.h to pager.h.
	Link $(BUILDDIR)/include/hurd/anonymous.h to anonymous.h.
	* mm-init.c: Include "exceptions.h".
	(mm_init): Call exception_handler_init.
	* pager.h: Completely rewrite.
	* pager.c: Likewise.
	* anonymous.h: Likewise.
	* anonymous.c: Likewise.
	* exceptions.h: New file.
	* exceptions.c: Likewise.
	* mmap.c: Include <hurd/anonymous.h>.
	(mmap): Rewrite to use an anonymous pager.

2007-11-19  Neal H. Walfield  <neal@gnu.org>

	* as.c (__hurd_startup_data): Declare.
	(free_space_desc_slab_alloc): Use ADDR_TO_PTR and PTR_TO_ADDR
	correctly.
	(free_space_desc_slab_dealloc): Likewise.
	(allocate_object): Likewise.
	(storage_alloc): Likewise.
	(as_init): Likewise.
	* capalloc.c (cappage_desc_slab_alloc): Likewise.
	(cappage_desc_slab_dealloc): Likewise.
	* storage.c (__hurd_startup_data): Declare.
	(check_slab_space_reserve): Likewise.
	(storage_desc_slab_dealloc): Likewise.
	(shadow_setup): Likewise.
	(storage_free): Likewise.

2007-11-16  Neal H. Walfield  <neal@gnu.org>

	* Makefile.am (COMMON_CPPFLAGS): Include \ at end of line.
	(libhurd_mm_a_CPPFLAGS): New variable.  Set to COMMON_CPPFLAGS.

	* mmap.c (munmap): New function.

2007-11-16  Neal H. Walfield  <neal@gnu.org>

	* Makefile.am (includehurd_HEADERS): Remove vm.h.  Add storage.h
	and as.h.
	(AM_CPPFLAGS): Rename from this...
	(COMMON_CPPFLAGS): ... to this.
	(libhurd_mm_a_SOURCES): Remove vm.h, vm.c, priv.h, store.c, map.c,
	memory.c, pager.c, core.c, anonymous.c, anonymous.h,
	physmem-user.h and physmem-user.c.  Add capalloc.h, capalloc.c,
	storage.h, storage.c, as.h and mmap.c.
	* headers.m4: Don't link $(BUILDDIR)/include/hurd/vm.h to vm.h or
	$(BUILDDIR)/include/hurd/anonymous.h to anonymous.h.  Link
	$(BUILDDIR)/include/hurd/as.h to as.h,
	$(BUILDDIR)/include/hurd/storage.h to storage.h, and
	$(BUILDDIR)/include/hurd/capalloc.h to libhurd-mm/capalloc.h.
	* mm-init.c: Rewrite.
	* mm.h: Likewise.
	* as.c: Likewise.
	* as.h: New file.
	* capalloc.h: Likewise.
	* capalloc.c: Likewise.
	* mmap.c: Likewise.
	* storage.h: Likewise.
	* storage.c: Likewise.

	* physmem-user.h: Remove file.
	* physmem-user.c: Remove file.

2005-04-06  Neal H. Walfield  <neal@gnu.org>

	* vm.h (hurd_vm_allocate): Remove declaration.
	(hurd_vm_release): Rename from hurd_vm_deallocate.  Update
	callers.
	(VM_HERE): Remove.
	(VM_ZEROFILL): Remove.
	* vm.c (hurd_vm_allocate): Remove function.
	(hurd_vm_release): Rename from hurd_vm_deallocate.

	* mm.h: Include <stdint.h>, <sys/types.h>, <l4/types.h> and
	<hurd/physmem.h>.
	(hurd_store_t): New typedef.
	(hurd_memory_t): Likewise.
	(hurd_memory_use): New declaration.
	(hurd_memory_transfer): Likewise.
	(hurd_store_fault_t): New typedef.
	(hurd_store_init): New declaration.
	(hurd_store_size): New declaration.
	(HURD_VM_HERE): New definition.
	(hurd_store_bind_to_vm): New declaration.
	(hurd_store_flush): New declaration.

	* priv.h: Include "vm.h" and "mm.h".
	(here): New debugging macro.
	(struct region): Move to...
	* mm.h: ...here.
	(struct hurd_memory): Rename from struct frame.
	Rename field dc_start to cont_start.  Add field cont.  Remove
	field refs.  Update users.
	(memory_slab): Rename from frame_slab.  Update users.
	(memory_alloc_into): Rename from frame_alloc_into.  Update users.
	(frame_alloc): Move to...
	* priv.h (frame_insert): Move to...
	* mm.h (hurd_store_cache): ...here.
	* priv.h (frame_find_first): Move to...
	* mm.h (hurd_store_find_cached): ...here.
	* priv.h (frame_map): Move to...
	* mm.h (hurd_memory_map): ...here.
	* priv.h (frame_dealloc): Move to...
	* mm.h (hurd_memory_dealloc): ...here.
	* priv.h (struct hurd_store): Rename from struct store.  Remove
	fields server and handle.  Add fields hook and fault.  Rename
	field frames to memory.  Update users.
	(store_find_free): Remove declaration.
	(struct map): Add field store_offset.
	(default_container): Likewise.
	(map_init): Likewise.
	(map_free): Rename from map_dealloc.  Update callers.
	(map_init): New declaration.
	(map_find_first): Rename from map_find.  Update callers.
	(as_find_free): Rename from map_find_free.  Update callers.
	(container_find_free): Remove declaration.
	(core_slab_allocate_buffer): Rename from
	mem_slab_allocate_buffer.  Update users.
	(core_slab_deallocate_buffer): Rename from
	mem_slab_deallocate_buffer.  Update users.
	(frame_spare): Rename to memory_spare.  Update users.
	(core_store): New declaration.
	
	* map.c (VIRTUAL_MEMORY_START): Move from here...
	* priv.h: ...to here.
	* map.c (as): Move from here...
	* as.c: ...to here.
	(map_system_init): Rename from map_init.  Reserve the UTCB and the
	KIP.
	(memory_spare): Rename from frame_spare.
	(core_slab_allocate_buffer): Rename from mem_slab_allocate_buffer.
	(core_slab_deallocate_buffer): Rename from
	mem_slab_deallocate_buffer.
	(map_init): New function.
	(map_free): Rename from map_dealloc.
	(map_find): Rename from map_find_first.  Avoid gratuitous
	hurd_btree_map_prev.
	(map_find_free): Remove function.
	(store_find_free): Move from here...
	* as.c (as_find_free): ...to here.

	* frame.c: Move from here...
	* memory.c: ...to here.  Include <hurd/startup.h>.
	(swap_store): Remove definition.
	(memory_slab): Rename from frame_slab.
	(default_container): New static global.
	(dc_offset): New function.
	(memory_system_init): Likewise.
	(memory_alloc_into): Rename from frame_alloc_into.
	(hurd_memory_new): New function.  Refactored from frame_alloc.
	(hurd_memory_delete): New function.
	(hurd_memory_alloc): Rename from frame_alloc.  Rewritten to use
	hurd_memory_new.
	(frame_insert): Move from here...
	* store.c (hurd_store_cache): ...to here.
	* memory.c (hurd_memory_use): New function.
	(hurd_memory_transfer): New function.
	(hurd_memory_dealloc): Rename from frame_dealloc.  Don't
	deallocate too eagerly: split memory which is only partially
	deallocated.
	(frame_find_first): Move from here...
	* store.c (hurd_store_find_cached): ...to here.
	* memory.c (hurd_memory_map): Rename from frame_map.  Loop
	mapping all of the requested if a single RPC is insufficient.
	
	* mm-init.c (default_container): Remove definition.
	(hurd_mm_init): Don't initialize DEFAULT_CONTAINER.  Don't
	initialize the store data structures.  Call memory_system_init,
	core_system_init, hurd_anonymous_init, and map_system_init.  Use
	core_allocate rather than hurd_vm_allocate to allocate a stack for
	the pager thread.

	* pager.c (pager): Don't round ADDR.  Call MAP->STORE->FAULT if
	the physical memory is not cached.

	* physmem-user.h: Include <hurd/physmem.h>.  Improve
	documentation.
	(hurd_pm_control_t): Remove redundant typedef.
	(hurd_pm_container_t): Likewise.
	(hurd_pm_container_access_t): Remove typedef.
	(HURD_PM_CONT_ALLOC_PARTIAL): Remove redundant define.
	(HURD_PM_CONT_ALLOC_SQUASH): Likewise.
	(HURD_PM_CONT_ALLOC_EXTRA): Likewise.
	(HURD_PM_CONT_ALLOC_DMA): Likewise.
	(hurd_pm_container_share): Change ACCESSS from a
	hurd_pm_container_access_t * to a hurd_pm_container_t *.
	(hurd_pm_container_map): Rename parameter rights to flags.  Add
	new parameter AMOUNT.  Update callers.
	* physmem-user.c (container_ops): Remove redundant enumeration.
	(hurd_pm_container_create): Use hurd_pm_container_create_id as the
	RPC identifier.
	(hurd_pm_container_share): Use hurd_pm_container_share_id as the
	RPC identifier.
	(hurd_pm_container_allocate): Use hurd_pm_container_allocate_id as
	the RPC identifier.
	(hurd_pm_container_deallocate): Use
	hurd_pm_container_deallocate_id as the RPC identifier.
	(hurd_pm_container_map): Use hurd_pm_container_map_id as the RPC
	identifier.  If AMOUNTP is non-NULL, return the number of bytes
	mapped in *AMOUNTP.  Remove debugging code.
	(hurd_pm_container_copy): Use hurd_pm_container_copy_id as the RPC
	identifier.

	* anonymous.h: New file.
	* anonymous.c: New file.
	* as.c: New file.
	* core.c: New file.
	* frame.c: Remove file.
	* store.c: New file.
	* Makefile.am (libhurd_mm_a_SOURCES): Add as.c, store.c, memory.c,
	core.c, anonymous.c and anonymous.h.  Remove frame.c.
	* headers.m4: Install anonymous.h as <hurd/anonymous.h>.
	
2005-03-09  Neal H. Walfield  <neal@gnu.org>

	* physmem-user.c (hurd_pm_container_map): Update argument
	marshalling.

2005-03-09  Neal H. Walfield  <neal@gnu.org>

	* map.c: Include "vm.h".
	(map_init): Cast HURD_STARTUP_ADDR to a uintptr_t.
	* pager.c (pager): Comment fix.

2005-03-08  Neal H. Walfield  <neal@gnu.org>

	* physmem-user.h (hurd_pm_container_copy): New declaration.
	* physmem-user.c (enum container_ops): Add container_copy_id.
	(hurd_pm_container_copy): New function.

2005-01-11  Neal H. Walfield  <neal@gnu.org>

	* Makefile.am: Initial check in.
	* README: Likewise.
	* frame.c: Likewise.
	* headers.m4: Likewise.
	* map.c: Likewise.
	* mm-init.c: Likewise.
	* mm.h: Likewise.
	* pager.c: Likewise.
	* physmem-user.c: Likewise.
	* physmem-user.h: Likewise.
	* priv.h: Likewise.
	* vm.c: Likewise.
	* vm.h: Likewise.
